{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2c4277ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "#The only thing to include in the paper/presentation from this code is the bar graph\n",
    "\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "from sklearn import preprocessing\n",
    "#import wfdb\n",
    "import copy as cp\n",
    "import scipy.signal as signal\n",
    "import pickle\n",
    "from sklearn import preprocessing\n",
    "from tqdm import tqdm\n",
    "import os\n",
    "import re\n",
    "import pandas as pd\n",
    "import csv\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import neighbors\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis \n",
    "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
    "\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from time import time\n",
    "import timeit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a186166b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/lh/98dp9hg53bjb8v17_1dc51k00000gn/T/ipykernel_1873/3159236473.py:12: DeprecationWarning: `set_matplotlib_formats` is deprecated since IPython 7.23, directly use `matplotlib_inline.backend_inline.set_matplotlib_formats()`\n",
      "  set_matplotlib_formats('retina')\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "plt.rcParams['figure.dpi'] = 70 #display 70 dpi in Jupyter Notebook, may consider100 dpi \n",
    "plt.rcParams['savefig.dpi'] = 300 #define 300 dpi for saving figures\n",
    "\n",
    "import seaborn as sns\n",
    "## here are some settings \n",
    "sns.set_style('whitegrid')\n",
    "sns.set(rc={\"figure.dpi\":70, 'savefig.dpi':300}) #defining dpi setting\n",
    "sns.set_context('notebook')\n",
    "sns.set_style(\"ticks\")\n",
    "from IPython.display import set_matplotlib_formats\n",
    "set_matplotlib_formats('retina')\n",
    "\n",
    "#sns.set(rc={'figure.figsize':(11.7,8.27)})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e292e12b-2660-4b05-811b-869e701034c5",
   "metadata": {},
   "source": [
    "# Side to side comparison plots"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "440be31b",
   "metadata": {},
   "outputs": [],
   "source": [
    "statallfeatures_dic = {\n",
    "    'Run Time': [],\n",
    "    'Accuracy': [],   ## To store the MEAN accuracy for 5-fold CV for each model\n",
    "    'Standard Error': [],\n",
    "    'Sensitivity': [],\n",
    "    'Specificity': [],\n",
    "    'Precision': [],\n",
    "    'F1_Score': []   \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7b81d6bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "## To store the accuracy for 5-fold CV for each model\n",
    "indaccs_dic = {}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa78a2a6",
   "metadata": {},
   "source": [
    "2021 train -> 2017 test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f054a900",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OID_</th>\n",
       "      <th>Id</th>\n",
       "      <th>gridcode</th>\n",
       "      <th>Shape_Length</th>\n",
       "      <th>Shape_Area</th>\n",
       "      <th>CH_mean</th>\n",
       "      <th>ARVI_max</th>\n",
       "      <th>ARVI_mean</th>\n",
       "      <th>ARVI_med</th>\n",
       "      <th>EVI_max</th>\n",
       "      <th>EVI_mean</th>\n",
       "      <th>EVI_med</th>\n",
       "      <th>NDVI_max</th>\n",
       "      <th>NDVI_mean</th>\n",
       "      <th>NDVI_med</th>\n",
       "      <th>SAVI_max</th>\n",
       "      <th>SAVI_mean</th>\n",
       "      <th>SAVI_med</th>\n",
       "      <th>Veg_class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>41.6</td>\n",
       "      <td>17.41</td>\n",
       "      <td>0.190714</td>\n",
       "      <td>0.609099</td>\n",
       "      <td>0.344183</td>\n",
       "      <td>0.379428</td>\n",
       "      <td>0.443455</td>\n",
       "      <td>0.292047</td>\n",
       "      <td>0.290985</td>\n",
       "      <td>0.665698</td>\n",
       "      <td>0.476709</td>\n",
       "      <td>0.507514</td>\n",
       "      <td>0.406991</td>\n",
       "      <td>0.286203</td>\n",
       "      <td>0.288351</td>\n",
       "      <td>woody</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>31.4</td>\n",
       "      <td>5.05</td>\n",
       "      <td>0.045000</td>\n",
       "      <td>0.387755</td>\n",
       "      <td>0.245301</td>\n",
       "      <td>0.274936</td>\n",
       "      <td>0.332059</td>\n",
       "      <td>0.252919</td>\n",
       "      <td>0.244477</td>\n",
       "      <td>0.526375</td>\n",
       "      <td>0.406745</td>\n",
       "      <td>0.433791</td>\n",
       "      <td>0.328585</td>\n",
       "      <td>0.254814</td>\n",
       "      <td>0.248126</td>\n",
       "      <td>non-woody</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>33.4</td>\n",
       "      <td>4.84</td>\n",
       "      <td>0.010000</td>\n",
       "      <td>0.038844</td>\n",
       "      <td>0.004040</td>\n",
       "      <td>0.026805</td>\n",
       "      <td>0.150550</td>\n",
       "      <td>0.131985</td>\n",
       "      <td>0.134891</td>\n",
       "      <td>0.208300</td>\n",
       "      <td>0.181575</td>\n",
       "      <td>0.205117</td>\n",
       "      <td>0.150184</td>\n",
       "      <td>0.131642</td>\n",
       "      <td>0.135063</td>\n",
       "      <td>non-woody</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>32.2</td>\n",
       "      <td>14.20</td>\n",
       "      <td>0.011667</td>\n",
       "      <td>0.189842</td>\n",
       "      <td>0.033418</td>\n",
       "      <td>0.018961</td>\n",
       "      <td>0.198972</td>\n",
       "      <td>0.141579</td>\n",
       "      <td>0.138338</td>\n",
       "      <td>0.341480</td>\n",
       "      <td>0.207390</td>\n",
       "      <td>0.197327</td>\n",
       "      <td>0.197330</td>\n",
       "      <td>0.141500</td>\n",
       "      <td>0.138725</td>\n",
       "      <td>non-woody</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>28.8</td>\n",
       "      <td>10.73</td>\n",
       "      <td>0.013750</td>\n",
       "      <td>0.322694</td>\n",
       "      <td>0.080315</td>\n",
       "      <td>0.061453</td>\n",
       "      <td>0.248442</td>\n",
       "      <td>0.158710</td>\n",
       "      <td>0.142326</td>\n",
       "      <td>0.457103</td>\n",
       "      <td>0.247391</td>\n",
       "      <td>0.228112</td>\n",
       "      <td>0.248598</td>\n",
       "      <td>0.158618</td>\n",
       "      <td>0.142817</td>\n",
       "      <td>non-woody</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   OID_  Id  gridcode  Shape_Length  Shape_Area   CH_mean  ARVI_max  \\\n",
       "0     1   2         2          41.6       17.41  0.190714  0.609099   \n",
       "1     2   3         3          31.4        5.05  0.045000  0.387755   \n",
       "2     3   5         5          33.4        4.84  0.010000  0.038844   \n",
       "3     4   6         6          32.2       14.20  0.011667  0.189842   \n",
       "4     5   7         7          28.8       10.73  0.013750  0.322694   \n",
       "\n",
       "   ARVI_mean  ARVI_med   EVI_max  EVI_mean   EVI_med  NDVI_max  NDVI_mean  \\\n",
       "0   0.344183  0.379428  0.443455  0.292047  0.290985  0.665698   0.476709   \n",
       "1   0.245301  0.274936  0.332059  0.252919  0.244477  0.526375   0.406745   \n",
       "2   0.004040  0.026805  0.150550  0.131985  0.134891  0.208300   0.181575   \n",
       "3   0.033418  0.018961  0.198972  0.141579  0.138338  0.341480   0.207390   \n",
       "4   0.080315  0.061453  0.248442  0.158710  0.142326  0.457103   0.247391   \n",
       "\n",
       "   NDVI_med  SAVI_max  SAVI_mean  SAVI_med  Veg_class  \n",
       "0  0.507514  0.406991   0.286203  0.288351      woody  \n",
       "1  0.433791  0.328585   0.254814  0.248126  non-woody  \n",
       "2  0.205117  0.150184   0.131642  0.135063  non-woody  \n",
       "3  0.197327  0.197330   0.141500  0.138725  non-woody  \n",
       "4  0.228112  0.248598   0.158618  0.142817  non-woody  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df = pd.read_csv('SRER21_dataset_v1.csv', na_values='?').dropna()\n",
    "test_df = pd.read_csv('SRER_2017_training_bi.csv', na_values='?').dropna()\n",
    "train_df.head()\n",
    "test_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d180c540",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sophiemao/opt/anaconda3/lib/python3.9/site-packages/sklearn/base.py:493: FutureWarning: The feature names should match those that were passed during fit. Starting version 1.2, an error will be raised.\n",
      "Feature names must be in the same order as they were in fit.\n",
      "\n",
      "  warnings.warn(message, FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---Run time is 0.056930155000000315 seconds ---\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.6496888684028578]\n",
      "Avg accuracy: 0.6496888684028578\n",
      "Std of accuracy : \n",
      "0.0\n",
      "\n",
      "[[1767  321]\n",
      " [1199 1052]]\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "   non-woody       0.60      0.85      0.70      2088\n",
      "       woody       0.77      0.47      0.58      2251\n",
      "\n",
      "    accuracy                           0.65      4339\n",
      "   macro avg       0.68      0.66      0.64      4339\n",
      "weighted avg       0.68      0.65      0.64      4339\n",
      "\n",
      "0.8462643678160919\n",
      "0.46734784540204355\n",
      "0.595751854349292\n",
      "0.6992481203007519\n"
     ]
    }
   ],
   "source": [
    "#Logistic Regression\n",
    "\n",
    "kf = KFold(n_splits=5, random_state=3, shuffle=True)\n",
    "model = LogisticRegression(solver='liblinear')\n",
    "\n",
    "start_time = timeit.default_timer()\n",
    "\n",
    "acc_score = []\n",
    "Truth = []\n",
    "Output = []\n",
    "    \n",
    "X_train = train_df.iloc[:, 5:18]\n",
    "X_test = test_df.iloc[:, 5:18]\n",
    "Y_train = train_df.iloc[:, -1]\n",
    "Y_test = test_df.iloc[:, -1]\n",
    "\n",
    "model.fit(X_train, Y_train)\n",
    "pred_values = model.predict(X_test)\n",
    "\n",
    "acc = accuracy_score(Y_test, pred_values)\n",
    "acc_score.append(acc)\n",
    "\n",
    "Truth.extend(Y_test.values.reshape(Y_test.shape[0])) \n",
    "Output.extend(pred_values)\n",
    "\n",
    "elapsed = timeit.default_timer() - start_time\n",
    "\n",
    "\n",
    "\n",
    "print(\"---Run time is %s seconds ---\" % elapsed)\n",
    "print()\n",
    "print('Accuracy of each fold: \\n {}'.format(acc_score))\n",
    "print(\"Avg accuracy: {}\".format(np.mean(acc_score)))\n",
    "print('Std of accuracy : \\n{}'.format(np.std(acc_score)))\n",
    "print()\n",
    "print(confusion_matrix(Truth, Output))\n",
    "print()\n",
    "print(classification_report(Truth, Output))\n",
    "\n",
    "cm = confusion_matrix(Truth, Output)\n",
    "\n",
    "sensitivity = cm[0][0]/(cm[0][0]+cm[0][1])\n",
    "specificity = cm[1][1]/(cm[1][0]+cm[1][1])\n",
    "precision = (cm[0][0])/(cm[0][0]+cm[1][0])\n",
    "f1_score = (2*precision*sensitivity)/(precision+sensitivity)\n",
    "\n",
    "print(sensitivity)\n",
    "print(specificity)\n",
    "print(precision)\n",
    "print(f1_score)\n",
    "\n",
    "statallfeatures_dic['Run Time'].append(elapsed)\n",
    "statallfeatures_dic['Accuracy'].append(np.mean(acc_score))\n",
    "statallfeatures_dic['Standard Error'].append(np.std(acc_score))\n",
    "statallfeatures_dic['Sensitivity'].append(sensitivity)\n",
    "statallfeatures_dic['Specificity'].append(specificity)\n",
    "statallfeatures_dic['Precision'].append(precision)\n",
    "statallfeatures_dic['F1_Score'].append(f1_score)\n",
    "\n",
    "indaccs_dic['LogReg']=acc_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "394c7700",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sophiemao/opt/anaconda3/lib/python3.9/site-packages/sklearn/base.py:493: FutureWarning: The feature names should match those that were passed during fit. Starting version 1.2, an error will be raised.\n",
      "Feature names must be in the same order as they were in fit.\n",
      "\n",
      "  warnings.warn(message, FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---Run time is 0.25929706500000016 seconds ---\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.606360912652685]\n",
      "Avg accuracy: 0.606360912652685\n",
      "Std of accuracy : \n",
      "0.0\n",
      "\n",
      "[[1718  370]\n",
      " [1338  913]]\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "   non-woody       0.56      0.82      0.67      2088\n",
      "       woody       0.71      0.41      0.52      2251\n",
      "\n",
      "    accuracy                           0.61      4339\n",
      "   macro avg       0.64      0.61      0.59      4339\n",
      "weighted avg       0.64      0.61      0.59      4339\n",
      "\n",
      "0.8227969348659003\n",
      "0.4055975122167925\n",
      "0.56217277486911\n",
      "0.6679626749611198\n"
     ]
    }
   ],
   "source": [
    "#LDA\n",
    "kf = KFold(n_splits=5, random_state=3, shuffle=True)\n",
    "model=LinearDiscriminantAnalysis()\n",
    "\n",
    "acc_score = []\n",
    "Truth = []\n",
    "Output = []\n",
    "  \n",
    "X_train = train_df.iloc[:, 5:18]\n",
    "X_test = test_df.iloc[:, 5:18]\n",
    "Y_train = train_df.iloc[:, -1]\n",
    "Y_test = test_df.iloc[:, -1]\n",
    "\n",
    "\n",
    "model.fit(X_train, Y_train)\n",
    "pred_values = model.predict(X_test)\n",
    "    \n",
    "acc = accuracy_score(Y_test, pred_values)\n",
    "acc_score.append(acc)\n",
    "\n",
    "Truth.extend(Y_test.values.reshape(Y_test.shape[0])) \n",
    "Output.extend(pred_values)\n",
    "\n",
    "elapsed = timeit.default_timer() - start_time\n",
    "\n",
    "\n",
    "\n",
    "print(\"---Run time is %s seconds ---\" % elapsed)\n",
    "print()\n",
    "print('Accuracy of each fold: \\n {}'.format(acc_score))\n",
    "print(\"Avg accuracy: {}\".format(np.mean(acc_score)))\n",
    "print('Std of accuracy : \\n{}'.format(np.std(acc_score)))\n",
    "print()\n",
    "print(confusion_matrix(Truth, Output))\n",
    "print()\n",
    "print(classification_report(Truth, Output))\n",
    "\n",
    "cm = confusion_matrix(Truth, Output)\n",
    "\n",
    "sensitivity = cm[0][0]/(cm[0][0]+cm[0][1])\n",
    "specificity = cm[1][1]/(cm[1][0]+cm[1][1])\n",
    "precision = (cm[0][0])/(cm[0][0]+cm[1][0])\n",
    "f1_score = (2*precision*sensitivity)/(precision+sensitivity)\n",
    "\n",
    "print(sensitivity)\n",
    "print(specificity)\n",
    "print(precision)\n",
    "print(f1_score)\n",
    "\n",
    "statallfeatures_dic['Run Time'].append(elapsed)\n",
    "statallfeatures_dic['Accuracy'].append(np.mean(acc_score))\n",
    "statallfeatures_dic['Standard Error'].append(np.std(acc_score))\n",
    "statallfeatures_dic['Sensitivity'].append(sensitivity)\n",
    "statallfeatures_dic['Specificity'].append(specificity)\n",
    "statallfeatures_dic['Precision'].append(precision)\n",
    "statallfeatures_dic['F1_Score'].append(f1_score)\n",
    "\n",
    "indaccs_dic['LDA']=acc_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4dacb836",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sophiemao/opt/anaconda3/lib/python3.9/site-packages/sklearn/base.py:493: FutureWarning: The feature names should match those that were passed during fit. Starting version 1.2, an error will be raised.\n",
      "Feature names must be in the same order as they were in fit.\n",
      "\n",
      "  warnings.warn(message, FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---Run time is 0.3992330550000003 seconds ---\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.5798571099331643]\n",
      "Avg accuracy: 0.5798571099331643\n",
      "Std of accuracy : \n",
      "0.0\n",
      "\n",
      "[[ 519 1569]\n",
      " [ 254 1997]]\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "   non-woody       0.67      0.25      0.36      2088\n",
      "       woody       0.56      0.89      0.69      2251\n",
      "\n",
      "    accuracy                           0.58      4339\n",
      "   macro avg       0.62      0.57      0.52      4339\n",
      "weighted avg       0.61      0.58      0.53      4339\n",
      "\n",
      "0.24856321839080459\n",
      "0.8871612616614838\n",
      "0.6714100905562742\n",
      "0.3628102062216009\n"
     ]
    }
   ],
   "source": [
    "#QDA\n",
    "kf = KFold(n_splits=5, random_state=3, shuffle=True)\n",
    "model=QuadraticDiscriminantAnalysis()\n",
    "\n",
    "acc_score = []\n",
    "Truth = []\n",
    "Output = []\n",
    "\n",
    "X_train = train_df.iloc[:, 5:18]\n",
    "X_test = test_df.iloc[:, 5:18]\n",
    "Y_train = train_df.iloc[:, -1]\n",
    "Y_test = test_df.iloc[:, -1]\n",
    "\n",
    "\n",
    "model.fit(X_train, Y_train)\n",
    "pred_values = model.predict(X_test)\n",
    "    \n",
    "\n",
    "acc = accuracy_score(Y_test, pred_values)\n",
    "acc_score.append(acc)\n",
    "\n",
    "Truth.extend(Y_test.values.reshape(Y_test.shape[0])) \n",
    "Output.extend(pred_values)\n",
    "\n",
    "elapsed = timeit.default_timer() - start_time\n",
    "\n",
    "\n",
    "print(\"---Run time is %s seconds ---\" % elapsed)\n",
    "print()\n",
    "print('Accuracy of each fold: \\n {}'.format(acc_score))\n",
    "print(\"Avg accuracy: {}\".format(np.mean(acc_score)))\n",
    "print('Std of accuracy : \\n{}'.format(np.std(acc_score)))\n",
    "print()\n",
    "print(confusion_matrix(Truth, Output))\n",
    "print()\n",
    "print(classification_report(Truth, Output))\n",
    "\n",
    "cm = confusion_matrix(Truth, Output)\n",
    "\n",
    "sensitivity = cm[0][0]/(cm[0][0]+cm[0][1])\n",
    "specificity = cm[1][1]/(cm[1][0]+cm[1][1])\n",
    "precision = (cm[0][0])/(cm[0][0]+cm[1][0])\n",
    "f1_score = (2*precision*sensitivity)/(precision+sensitivity)\n",
    "\n",
    "print(sensitivity)\n",
    "print(specificity)\n",
    "print(precision)\n",
    "print(f1_score)\n",
    "\n",
    "statallfeatures_dic['Run Time'].append(elapsed)\n",
    "statallfeatures_dic['Accuracy'].append(np.mean(acc_score))\n",
    "statallfeatures_dic['Standard Error'].append(np.std(acc_score))\n",
    "statallfeatures_dic['Sensitivity'].append(sensitivity)\n",
    "statallfeatures_dic['Specificity'].append(specificity)\n",
    "statallfeatures_dic['Precision'].append(precision)\n",
    "statallfeatures_dic['F1_Score'].append(f1_score)\n",
    "\n",
    "indaccs_dic['QDA']=acc_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "58d646a3",
   "metadata": {},
   "source": [
    "#KNN-CV\n",
    "KNN_result = []\n",
    "X=subject_df.iloc[:, 2:17]\n",
    "Y=subject_df.iloc[:, -1]\n",
    "crossvalidation = KFold(n_splits=5, random_state=3, shuffle=True)\n",
    "KNNResult = []\n",
    "for k in range(1,26):\n",
    "    knn = neighbors.KNeighborsClassifier(n_neighbors=k)\n",
    "    model = knn.fit(X, Y)\n",
    "    scores=cross_val_score(model, X, Y, cv=crossvalidation)\n",
    "    print('K={}'.format(k))\n",
    "    print()\n",
    "    print('Accuracy of each fold: \\n {}'.format(scores))\n",
    "    print()\n",
    "    print(\"Avg accuracy: {}\".format(scores.mean()))\n",
    "    print()\n",
    "    KNN_result.append(scores.mean())\n",
    "print(KNN_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ed77ee9a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "K=1\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.82365907 0.808964   0.81116826 0.81410727 0.80749449]\n",
      "\n",
      "Avg accuracy: 0.813078618662748\n",
      "\n",
      "K=2\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.81337252 0.80529023 0.80969875 0.79500367 0.8199853 ]\n",
      "\n",
      "Avg accuracy: 0.8086700955180015\n",
      "\n",
      "K=3\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.84937546 0.82953711 0.84349743 0.82880235 0.84349743]\n",
      "\n",
      "Avg accuracy: 0.8389419544452608\n",
      "\n",
      "K=4\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.84276267 0.82586334 0.85084497 0.8185158  0.84055841]\n",
      "\n",
      "Avg accuracy: 0.8357090374724467\n",
      "\n",
      "K=5\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.85819251 0.83541514 0.85525349 0.83247612 0.84790595]\n",
      "\n",
      "Avg accuracy: 0.8458486407053638\n",
      "\n",
      "K=6\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.85304923 0.8376194  0.85745775 0.82733284 0.84129317]\n",
      "\n",
      "Avg accuracy: 0.8433504775900074\n",
      "\n",
      "K=7\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.85819251 0.8376194  0.86480529 0.84202792 0.85378398]\n",
      "\n",
      "Avg accuracy: 0.8512858192505511\n",
      "\n",
      "K=8\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.856723   0.83468038 0.86333578 0.83688464 0.84570169]\n",
      "\n",
      "Avg accuracy: 0.8474650991917707\n",
      "\n",
      "K=9\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.86700955 0.83100661 0.86480529 0.84790595 0.85231447]\n",
      "\n",
      "Avg accuracy: 0.852608376193975\n",
      "\n",
      "K=10\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.86186627 0.82733284 0.86921381 0.84129317 0.84790595]\n",
      "\n",
      "Avg accuracy: 0.8495224099926524\n",
      "\n",
      "[0.813078618662748, 0.8086700955180015, 0.8389419544452608, 0.8357090374724467, 0.8458486407053638, 0.8433504775900074, 0.8512858192505511, 0.8474650991917707, 0.852608376193975, 0.8495224099926524]\n"
     ]
    }
   ],
   "source": [
    "KNN_result = []\n",
    "X=train_df.iloc[:, 5:18]\n",
    "Y=train_df.iloc[:, -1]\n",
    "crossvalidation = KFold(n_splits=5, random_state=3, shuffle=True)\n",
    "KNNResult = []\n",
    "for k in range(1,11):\n",
    "    knn = neighbors.KNeighborsClassifier(n_neighbors=k)\n",
    "    model = knn.fit(X, Y)\n",
    "    scores=cross_val_score(model, X, Y, cv=crossvalidation)\n",
    "    print('K={}'.format(k))\n",
    "    print()\n",
    "    print('Accuracy of each fold: \\n {}'.format(scores))\n",
    "    print()\n",
    "    print(\"Avg accuracy: {}\".format(scores.mean()))\n",
    "    print()\n",
    "    KNN_result.append(scores.mean())\n",
    "print(KNN_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e1f5e7aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/sophiemao/opt/anaconda3/lib/python3.9/site-packages/sklearn/base.py:493: FutureWarning: The feature names should match those that were passed during fit. Starting version 1.2, an error will be raised.\n",
      "Feature names must be in the same order as they were in fit.\n",
      "\n",
      "  warnings.warn(message, FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "---Run time is 3.8188825240000006 seconds ---\n",
      "\n",
      "Accuracy of each fold: \n",
      " [0.5826227241299838]\n",
      "Avg accuracy: 0.5826227241299838\n",
      "Std of accuracy : \n",
      "0.0\n",
      "\n",
      "[[1322  766]\n",
      " [1045 1206]]\n",
      "\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "   non-woody       0.56      0.63      0.59      2088\n",
      "       woody       0.61      0.54      0.57      2251\n",
      "\n",
      "    accuracy                           0.58      4339\n",
      "   macro avg       0.59      0.58      0.58      4339\n",
      "weighted avg       0.59      0.58      0.58      4339\n",
      "\n",
      "0.6331417624521073\n",
      "0.5357618836072856\n",
      "0.5585128855090832\n",
      "0.5934904601571268\n"
     ]
    }
   ],
   "source": [
    "#KNN-CV\n",
    "kf = KFold(n_splits=5, random_state=3, shuffle=True)\n",
    "model=neighbors.KNeighborsClassifier(n_neighbors=8)\n",
    "\n",
    "acc_score = []\n",
    "Truth = []\n",
    "Output = []\n",
    "\n",
    "X_train = train_df.iloc[:, 5:18]\n",
    "X_test = test_df.iloc[:, 5:18]\n",
    "Y_train = train_df.iloc[:, -1]\n",
    "Y_test = test_df.iloc[:, -1]\n",
    "\n",
    "model.fit(X_train, Y_train)\n",
    "pred_values = model.predict(X_test)\n",
    "\n",
    "acc = accuracy_score(Y_test, pred_values)\n",
    "acc_score.append(acc)\n",
    "\n",
    "Truth.extend(Y_test.values.reshape(Y_test.shape[0])) \n",
    "Output.extend(pred_values)\n",
    "\n",
    "elapsed = timeit.default_timer() - start_time\n",
    "\n",
    "print()\n",
    "print(\"---Run time is %s seconds ---\" % elapsed)\n",
    "print()\n",
    "print('Accuracy of each fold: \\n {}'.format(acc_score))\n",
    "print(\"Avg accuracy: {}\".format(np.mean(acc_score)))\n",
    "print('Std of accuracy : \\n{}'.format(np.std(acc_score)))\n",
    "print()\n",
    "print(confusion_matrix(Truth, Output))\n",
    "print()\n",
    "print(classification_report(Truth, Output))\n",
    "\n",
    "cm = confusion_matrix(Truth, Output)\n",
    "\n",
    "sensitivity = cm[0][0]/(cm[0][0]+cm[0][1])\n",
    "specificity = cm[1][1]/(cm[1][0]+cm[1][1])\n",
    "precision = (cm[0][0])/(cm[0][0]+cm[1][0])\n",
    "f1_score = (2*precision*sensitivity)/(precision+sensitivity)\n",
    "\n",
    "print(sensitivity)\n",
    "print(specificity)\n",
    "print(precision)\n",
    "print(f1_score)\n",
    "\n",
    "statallfeatures_dic['Run Time'].append(elapsed)\n",
    "statallfeatures_dic['Accuracy'].append(np.mean(acc_score))\n",
    "statallfeatures_dic['Standard Error'].append(np.std(acc_score))\n",
    "statallfeatures_dic['Sensitivity'].append(sensitivity)\n",
    "statallfeatures_dic['Specificity'].append(specificity)\n",
    "statallfeatures_dic['Precision'].append(precision)\n",
    "statallfeatures_dic['F1_Score'].append(f1_score)\n",
    "\n",
    "indaccs_dic['KNN']=acc_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dbab039a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Standard Error</th>\n",
       "      <th>Sensitivity</th>\n",
       "      <th>Specificity</th>\n",
       "      <th>Precision</th>\n",
       "      <th>F1-Score</th>\n",
       "      <th>Run Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>LogReg</th>\n",
       "      <td>0.649689</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.846264</td>\n",
       "      <td>0.467348</td>\n",
       "      <td>0.595752</td>\n",
       "      <td>0.699248</td>\n",
       "      <td>0.056930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LDA</th>\n",
       "      <td>0.606361</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.822797</td>\n",
       "      <td>0.405598</td>\n",
       "      <td>0.562173</td>\n",
       "      <td>0.667963</td>\n",
       "      <td>0.259297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>QDA</th>\n",
       "      <td>0.579857</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.248563</td>\n",
       "      <td>0.887161</td>\n",
       "      <td>0.671410</td>\n",
       "      <td>0.362810</td>\n",
       "      <td>0.399233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KNN-CV</th>\n",
       "      <td>0.582623</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.633142</td>\n",
       "      <td>0.535762</td>\n",
       "      <td>0.558513</td>\n",
       "      <td>0.593490</td>\n",
       "      <td>3.818883</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Accuracy  Standard Error  Sensitivity  Specificity  Precision  \\\n",
       "LogReg  0.649689             0.0     0.846264     0.467348   0.595752   \n",
       "LDA     0.606361             0.0     0.822797     0.405598   0.562173   \n",
       "QDA     0.579857             0.0     0.248563     0.887161   0.671410   \n",
       "KNN-CV  0.582623             0.0     0.633142     0.535762   0.558513   \n",
       "\n",
       "        F1-Score  Run Time  \n",
       "LogReg  0.699248  0.056930  \n",
       "LDA     0.667963  0.259297  \n",
       "QDA     0.362810  0.399233  \n",
       "KNN-CV  0.593490  3.818883  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transitionsdf = pd.DataFrame(\n",
    "    data = np.transpose(np.array([\n",
    "                                statallfeatures_dic[\"Accuracy\"],\n",
    "                                statallfeatures_dic[\"Standard Error\"],\n",
    "                                statallfeatures_dic[\"Sensitivity\"],\n",
    "                                statallfeatures_dic[\"Specificity\"],\n",
    "                                statallfeatures_dic[\"Precision\"],\n",
    "                                statallfeatures_dic[\"F1_Score\"],\n",
    "                                statallfeatures_dic[\"Run Time\"] \n",
    "                            ])\n",
    "                       ),\n",
    "    \n",
    "    columns = [\"Accuracy\", \"Standard Error\", \"Sensitivity\", \"Specificity\", \"Precision\", \"F1-Score\", \"Run Time\"]\n",
    "    \n",
    ")\n",
    "\n",
    "transitionsdf.set_index(pd.Index([\"LogReg\", \"LDA\", \"QDA\", \"KNN-CV\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c7b7c1dd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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Nm/eLEl6++23VaVKlTTFMHv2bM2aNUtSbMOiTp06ycXFRY6Ojjp//rzWrFmju3fv6sCBAxo0aJB+++23RBs5SBl7X2en9957z/ju1KJFC2O4snv37snPz0/btm1TVFSUvvrqK1WrVi1djSymTp2qS5cuqXDhwurVq5cqV66se/fuae3atfrzzz8VExOjKVOmqGnTpgmep+fOndMrr7xifM9u3LixOnXqpDx58ujMmTPG58KTPUPSY/PmzUalfvwGBblz51bbtm3l4+OjW7duae/evWrTpk2Gj5fdli5dqsmTJ0uKnbOvW7duatCggRwcHHThwgV5e3vr1q1bWrt2rR48eGDWYytORr6DpuczIjP4+voqPDxclStX1oABA2Rra6tdu3aZ9XzN6LU5fPiw0eDCyclJPXv2VOXKlWVtba2rV69q9erVunnzps6dO6f3339fS5YsyZJzBYCnjUQPACBFjRo1kpOTk4KCgrRt27YkEz1xFeINGzZU4cKFk91naGio3n//fSPJ8/HHHydoSfjKK6/o22+/1aJFi/Tw4UO98847Wr9+vVnvnC+//NL48TlmzBizIZa6du2qPn36aPDgwbpz506SsRw8eNBI8lSpUkULFiww67X08ssv67XXXjNauS9ZskRt2rRR06ZNkz3HrLZz504dPHhQUmwvgCeHNvniiy+MSvtXX31VH3zwgdm169u3r/bs2aO33npL4eHheu+997R169ZEW9CHh4crf/78WrVqlXFtevToYVZm8eLFxuvEEhkzZswwkjyNGzfWjz/+aNZ7oVevXurbt6/eeOMNPXr0SDNnzlSzZs1Uq1atRM8/PDzcGI5EUpIV8teuXVPZsmW1dOlSs79r+/bt1bVrV8XExGjv3r2SYn8w9+/f3ygTV4G7ZMkSY0iz0aNHG+vPnz9vDDNSrVo1LV++XDlz5jQ7/iuvvGLWynjjxo1JJnquXr0qR0dHLVy40Gw4CldXVzVv3lzvvPOOJMnLy0tjxowx+3ueOHFCK1eulCQVLVpUv/76q1litGfPnmrfvr1Gjx4tk8mkKVOmqHXr1kar2My8X56G//77T59++qmk2Dmhpk2blqBi9LXXXtPYsWO1ZcsW3bp1Sx9//LHmzZuX6P7Cw8NVr149LVmyxKhQj38vZJXvvvvO6NHTuHHjJJ+d4eHhev311xNN8EmxydW4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rVu3GsmxkSNHqnLlylkWz9ixY3X8+HFdvHhRfn5+eumll+Tu7q4qVaooLCxMhw4d0ubNm4143njjjWTnCcludnZ26tatm3777TfFxMTIw8NDPXv2VI0aNWRlZaXLly9r06ZNCXpXPHr0SDExMamu0EitZs2aqW/fvlq1apWuXbumrl27qlevXqpRo4YePXqkY8eOycfHRyaTSba2tpo4caJsbGyM7Z+1+yUlpUqV0ieffKIJEyYoMjJSb731llq3bq3WrVsrT548unr1qtasWWPM/1CoUCF9/fXX2RZvVhs7dqyOHTumy5cv69y5c+rcubPc3d1Vo0YNhYeH69SpU1q3bp3RmtfNzU2tWrUy24e7u7u2bNmiAwcO6OTJk+rcubP69eun8uXL67///pOXl5cuXryY7PM0OU5OTpo4caLGjBmjsLAwvfrqq+rUqZOaNWsmGxsb/fPPP/L09DSSHW+88YbRU0Uyn+PE29tblSpVUt68eVWnTp2nVvn78ccf69ixY7p3755+/vln+fn5qVu3bipUqJCuXbsmT09PBQQEyMbGxmgYEP99lpz4PaVSO4RRHFdXV82cOVMmk0mnTp3S2bNnjbm24l+3X3/9Vfnz55etra1atmyZpp64yenRo4fZPEHXrl1T+/bt5eTkpNu3b2vv3r06fPhwgsRYVs0B87Q4OTkpKChIffv2Vc+ePVWrVi09fvxYmzZtMoZAzJ07tzFM5rOgSJEiat68uQ4cOKDQ0FD17t1bffr0UeXKlRUZGal///1XGzdu1N27d822S+xvFf/emjlzpsLDwxUTE6MuXbqk2Dq+bt26euONN/TTTz8pJCREgwYNUufOneXi4iJHR0edP39eXl5eRhwVK1bU+PHjM+EKpN+IESN05MgRnThxQnfu3FHv3r3VrFkzubi4qGjRooqJidHt27d17Ngx7du3z/i8bN26tTw8PBLsr3379qpTp45Onjyp8+fPq127durZs6cqVKggGxsbXb9+XWvWrDHmNWvXrt1THQLQyspKkyZNUr9+/RQWFqaJEydq586d6tixo/Lmzavz58/rt99+U1BQULqeeekZti1Ojx49jJ5eO3bsUFBQkFnPk2ddgwYNNGzYMM2bN0+RkZEaPXq0WrVqpTZt2ih37ty6evWqvLy8jEY7hQsX1scff2xsn5nfQVP6jLCyspKbm5t+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l8pkMumNN94wkjySVL16dbm7u2v58uXa+f/au/N4rcf8f+Cv02mPVPYthBLKWsYyjGTEMNZihMFg7OZrxvZlDI31O8yILIOxFyJEWbOUJUuWrJFCCom0p051//7o1xlNp/1Ocx/P5+PR43F8ruXz/pxyn7pf93Vd/fpl7733nu8c//rXv5Ikl112WWXIkyQrrbRS/vjHP+bll1/OhAkTltkzAMBP3bQZM1Pv7EeXdxlFMfNveyczp+fTbisu71KW2vonTxT2AAAAwH+parN126BBg5IkO+200zxtc64NHDhwvuOnTZuWl156KRtvvHFatGgxT/tee+2VLl26pHXr1kWqGAAAAAAAYOlUixU9s2bNyvDhw9OkSZM0bNhwnvamTZsmSYYPHz7fOYYOHZoZM2akefPmGTVqVK655po8//zzmThxYjbccMMceeSR2XfffRday+DBgxep5qFDhy5SPwAAAAAAgPmpFkHPxIkTUygUstJKK1XZPif8mThx4nznGD16dJJkzJgx2X///dOoUaN06NAhkyZNSr9+/XLmmWdm2LBhOf300xdYS6dOnZbwKQAAAAAAABZPtQh6pk6dmiSpVatWle21a9dOMnt7tvmZPHlykuTVV1/NL37xi1x99dWpU2f2XvSff/55OnbsmH/+859p165dttxyyyJWDwAAAAAAsGSqRdAzJ8ipqKiosn369OlJkvr16893jvLy8sqvL7zwwsqQJ0nWXXfdHHvssfm///u/PPLIIwsMenr27LlINQ8dOjTnnnvuIvUFAAAAAACoSrUIelZcccWUl5fPd2u2CRMmJEmV5/fMscIKKyRJVltttayxxhrztG+++eZJks8++2yBtWyxxRaLVDMAAAAAAMDSqhZBT61atdK0adN8+umnmTx5cho0aDBX+4gRI5IkG2200XznaNasWZJ/r/75TzNmzEiy4FVBQOmZVTH/LR1LRY1adRbeCQAAAAColqpF0JMkbdu2zSeffJKBAwemffv2c7W9+OKLSZI2bdrMd/y6666bddZZJyNHjsy7775buYJnjsGDBydJNtlkkyJXDiwvsyqmZcgxdZd3GUut5W2zlncJAAAAAPwIZs0o/feBatSssbxLqHaqTdDTsWPH9OzZM127ds12222XFVdcMUkyZMiQ9OrVK2usscY8AdB/Ovzww3PppZfmoosuyr/+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559PWVlZDjzwwGKXCAAAAAAAUC0UPehp3Lhxbr311hx99NEZM2ZMunfvnu7du1fZt1AoZJVVVsn111+fVVZZJUny6KOPZsCAAUmSvffeO7vttluxSwQAAAAAAKgWih70JMnGG2+cJ554IjfffHN69+6dUaNGzdOncePGOeCAA/L73/8+DRs2rLw+fvz4bL311tlnn31y8MEHL4vyAAAAAACoSnnt5V0BsJiWSdCTJPXr18+pp56aU089NZ988klGjRqVcePGpW7dumnatGk23njjlJWVzTPu4osvXlYlAQAAAACwCKbNnLG8S1hqdcqX2dvf8F/lR/mTvsEGG2SDDTb4MW4FAAAAAMBSmDZzRurfcfbyLmOpzTjyb8u7BPhR1FjeBSTJN998kx49eizvMgAAAAAAAErKMlnRM2nSpNx222158cUX891332XGjBkpFApz9SkUCpk+fXomT56c77//PmVlZTn00EOXRTkAAAAAAADVUtGDnqlTp+Y3v/lNPv744ySZJ+CZn/Ly8mKXAgAAAAAAUK0VPei5++67M3To0CTJuuuum6222ipff/11Xn755WyxxRbZZJNN8t133+WNN97IN998k7KysnTu3DknnnhisUsBAAAAAACo1ooe9PTr1y9Jst122+Xmm29OrVq18v777+eAAw7IiiuumAsvvDBJUlFRkcsvvzx33XVXHnvssZx00knFLgUAAAAAAKBaq1HsCYcPH56ysrIcf/zxqVWrVpJkk002Sd26dfP6669XbuVWq1atnHfeedl+++0zduzY9OjRo9ilAAAAAAAAVGtFD3omTZqUJGnWrNm/b1KjRjbccMN8//33GT58+Fz9jzzyyBQKhTz33HPFLgUAAAAAAKBaK3rQ06BBg9kT15h76vXWWy9JMmzYsLmub7LJJkmSESNGFLsUAAAAAACAaq3oQc9aa62VJPn000/nur7++usnST788MMqx02ePLnYpQAAAAAAAFRrRQ962rRpk0KhkJtuuikzZsyovL7RRhtVuUXboEGDkvx7JRAAAAAAAACLpuhBT+fOnVNeXp7nn38+Bx54YB5//PEkyc4775yGDRvm/fffz0UXXZRhw4blySefzKWXXpqysrK0bt262KUAAAAAAABUa0UPetZbb72cc845KRQK+eijjzJgwIAkyQorrJAjjjgihUIh3bt3z957753TTjst33zzTZLkyCOPLHYpAAAAAAAA1VrNZTHpYYcdlk022SS33nprmjdvXnn9xBNPzHfffZe77747s2bNSpLUrVs3Z5xxRnbcccdlUQoAAAAAAEC1tUyCniTZdttts+222851rUaNGvnzn/+cY489NoMHD055eXm22WabNG7ceFmVAQAAAAAAUG0VPej54osvkiRrrbXWfPusscYaWWONNZIks2bNyhtvvJExY8Zkjz32KHY5AAAAAAAA1VbRg5527dqlRo0aef3111OvXr2F9h83blwOPfTQrLLKKoIeAAAAAACAxVBjWUxaKBRSVla2SH0///zzJMmECROWRSkAAAAAAADV1hKv6CkUCjnjjDPy9ddfV9l+zDHHpEaNBedIFRUV+eijj1JWVrbArd4AAAAAAACY1xIHPWVlZdl9991z2mmnzdNWKBQyaNCgxZrvt7/97ZKWAgAAAAAA8JO0VGf07LHHHjn++OMzevToymsPPvhgysrKsvfee6dmzQVPX7NmzTRq1Cjbbbdddtppp6UpBQAAAAAA4CdnqYKeJPnDH/4w138/+OCDSZIuXbqkXr16Szs9AAAAAAAA87HUQc9/uvTSS5MkderUKfbUAAAAAAAA/EDRg57999+/2FMCAAAAAABQhaIHPT80duzYjBo1KtOmTUuhUFho/zZt2izLcgAAAAAAAKqVZRL0DBkyJBdddFFef/31RR5TVlaW999/f1mUAwAAAAAAUC0VPegZNWpUOnfunClTpizSKh4AAAAAAACWTNGDnn/+85+ZPHlyktnn9ey2225p0qRJateuXexbAQAAAAAA/KQVPeh54YUXUlZWlmOPPTann356sacHAAAAAADg/6tR7AnHjBmTJOnUqVOxpwYAAAAAAOAHih70NGrUKElSv379Yk8NAAAAAADADxQ96Gnbtm2S5PXXXy/21AAAAAAAAPxA0YOeY445JuXl5fn73/+e8ePHF3t6AAAAAAAA/r+axZ6wZcuW+dvf/pazzz47++yzTw466KC0bt06jRs3Ts2aC77dZpttVuxyAAAAAAAAqq2iBz1bbLFFkmTGjBkZM2ZMrr/++kUaV1ZWlvfff7/Y5QAAAAAAAFRbRQ96pk2bVuwpAQAAAAAAqELRg5477rij2FMCAAAAAABQhaIHPW3bti32lAAAAAAAAFShxvIuAAAAAAAAgCVT9BU9PzRmzJg89NBDef311zN69OhMnjw5Tz75ZJLkyiuvTIsWLfKrX/0qZWVly7IMAAAAAACAammZBT3XX399rrvuusyYMSNJUigU5gp0+vbtm5tvvjl33XVXrr322qy88srLqhQAAAAAAIBqaZls3XbRRRfl6quvTkVFRRo0aJBtt912nj4zZsxIoVDI4MGDc+yxx1YGQgAAAAAAACyaogc9r7zySu66664kyXHHHZcXXnghN9xwwzz9+vXrl9///vcpFAr54IMP0rNnz2KXAgAAAAAAUK0VPejp3r17kuSAAw7I6aefnrp161Z5Bk/t2rXzP//zP+nUqVMKhUL69u1b7FIAAAAAAACqtaIHPW+++WbKysrSuXPnRep/6KGHJkmGDh1a7FIAAAAAAACqtaIHPePGjUuSrLPOOovUf80110ySTJkypdilAAAAAAAAVGtFD3oaNmyYJPnmm28Wqf8XX3yRJGnUqFGxSwGKrbz28q4AAAAAAIAfqFnsCVu1apX+/funT58+OfXUUxfa/+67706SbL755sUuBVhGps2csbxLWGp1yov+8gcAAAAA8KMr+judBx54YJ577rncdNNNadWqVXbdddf59r399tvTs2fPlJWVZd999y12KcAyMG3mjNS/4+zlXcZSm3Hk35Z3CQAAAAAAS63oQc/uu++edu3a5ZlnnsmJJ56YNm3aZNNNN61s79mzZ0aOHJlnn302H3/8cZJk++23z5577lnsUgAAAAAAAKq1ZbJ30T/+8Y+cddZZefzxx/Pqq6/mtddeS1lZWZLkL3/5S5KkUCgkSXbcccdcddVVy6IMAAAAAACAam2ZBD116tTJVVddlRdffDH33ntvBg0alLFjx1a2N2jQIFtttVU6duyYPfbYY1mUAAAAAAAAUO0t09PId9xxx+y4445JksmTJ2fSpEmpV69eGjZsuCxvCwAAAAAA8JNQY1lO/vnnn+ftt99OMnsVz+qrr56GDRvm7bffzg033JDPPvtsWd4eAAAAAACgWlsmQc/EiRNz+umnZ4899sh11103T/trr72Wq666KnvuuWfOP//8VFRULIsyAAAAAAAAqrWib91WUVGRo446Ku+9914KhUI+//zzefqUl5enXr16mTp1au677758/fXXueGGG4pdCgAAAAAAQLVW9BU93bt3z7vvvpuysrKceOKJueeee+bpc+SRR+bVV1/NaaedlvLy8vTv3z8PPfRQsUsBAAAAAACo1ooe9PTt2zdlZWU57rjjcuqpp2bFFVessl+tWrVywgkn5Mgjj0yhUEivXr2KXQoAAAAAAEC1VvSgZ9iwYUmS/ffff5H6z+k3ZMiQYpcCAAAAAABQrRU96CkUCkky35U8/2nllVdOkkyfPr3YpQAAAAAAAFRrRQ961lprrSTJ4MGDF6n/+++/nyRZddVVi10KAAAAAABAtVb0oGennXZKoVDIVVddlSlTpiyw7/Tp03PVVVelrKwsO+ywQ7FLAQAAAAAAqNaKHvR07tw5derUyUcffZSDDz44zzzzzDzbsk2fPj0DBgzIIYcckrfffjvl5eU56qijil0KAAAAAABAtVaz2BM2bdo0F154Yc4+++x8/PHHOemkk1JeXp7VVlst9erVy9SpU/P1119n5syZKRQKKSsry1/+8pdssMEGxS4FAAAAAACgWit60JMk++23X9Zcc8106dIlw4YNy4wZM/LFF1/M02+DDTbI//7v/+bnP//5sigDAAAAAACgWlsmQU+SbLfddunbt28++uijvPLKKxk9enTGjx+funXrZs0118xWW22VrbbaalndHgAAAAAAoNoretDTvXv3rLbaatl1111Ts2bNNG/ePM2bNy/2bQAAAAAAAH7yahR7wltuuSWnnnpqHnzwwWJPDQAAAAAAwA8UPegZM2ZMkmSXXXYp9tQAAAAAAAD8QNGDnlVXXTVJMnbs2GJPDQAAAAAAwA8UPeg54YQTUigUcsEFF+Tbb78t9vQAAAAAAAD8fzWLPWHz5s3zm9/8JnfffXd23XXXbLXVVmnZsmUaNWqUOnXqLHDsUUcdVexyAAAAAAAAqq2iBz0HH3xwkqSsrCzTp0/Pq6++mldffXWh48rKygQ9AAAAAAAAi6HoQU+hUFjgfy/qOAAAAAAAABas6EHPkCFDij0lAAAAAAAAVaixvAsAAAAAAABgyfxoQc+kSZPy1Vdf/Vi3AwAAAAAAqPaKvnXbDz3xxBO5//778+abb2by5MkpKyvL+++/nyQ5+uijs8466+Skk07K6quvvizLAAAAAAAAqJaWSdAzceLE/OEPf8hLL72UJCkUCvP0+fDDDzNw4MA8+eSTueGGG7Llllsui1IAAAAAAACqraJv3TZr1qyccMIJefHFF1MoFLL99tvn+OOPn6ffFltskSQZN25cTjjhhIwdO7bYpQAAAAAAAFRrRQ96HnzwwQwaNCj16tXLzTffnFtuuSXHHXfcPP2uu+663HTTTalXr17GjRuX22+/vdilAAAAAAAAVGtFD3p69+6dsrKyHH/88dlpp50W2HennXbKiSeemEKhkOeee67YpQAAAAAAAFRrRQ96PvzwwyTJnnvuuUj9f/nLXyZJRowYUexSAAAAAAAAqrWiBz1Tp05NkjRq1GiR+q+00kpJZp/tAwAAAAAAwKIretCzyiqrJEk+/fTTRer/wQcfJElWXXXVYpcCAAAAAABQrRU96Gnbtm2S5Lbbblto31mzZuX6669PWVlZtt1222KXAgAAAAAAUK0VPej57W9/myR57LHHcvnll+f777+vst/XX3+dP/zhD3n11VeTJIceemixSwEAAAAAAKjWahZ7wpYtW+bUU09N165dc9ttt+Wee+7JhhtuWNn+xz/+MaNGjcq7776bmTNnJkmOPvrotG7dutilAAAAAAAAVGtFX9GTJCeccEL+/Oc/p27dupk6dWrefffdyrZHH300b731VmbMmJGaNWvmD3/4Q84444yi3btv377p1KlTttlmm7Rp0ybHHHNM3nzzzSWe79VXX03Lli1z4oknFq1GAAAAAACAYij6ip45OnfunF//+td5+OGH89prr2XEiBGZPHly6tatmzXXXDNbb7119ttvv6y22mpFu2e3bt1yzTXXZJ111kmnTp0yfvz4PProo+ncuXOuv/767LLLLos138SJE3PWWWdl1qxZRasRAAAAAACgWJZZ0JMkK664Yjp37pzOnTsvy9skSYYOHZpu3bqlefPmueeee9KgQYMkswOnQw89NOedd16eeuqp1K1bd5Hn7NKlS7744otlVTIAQGkor728KwAAAADmoyhBz9ixY3Prrbfm2WefzahRo1JeXp5mzZrll7/8ZX7zm99Uhi7L0p133plCoZATTjhhrvttttlmOfDAA9O9e/f069cve++99yLN99hjj+Xhhx9O+/bt069fv2VVNgBAyZg2c8byLmGp1Slfpp9zAgAAgB/dUv9L99VXX83JJ5+ciRMnplAoVF5/55138s477+See+7J9ddfn4033nhpb7VAgwYNSpLstNNO87TttNNO6d69ewYOHLhIQc/o0aNzwQUXZLvttsvh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CXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRNVc3gUUW9++fXP77bdn2LBhqVGjRrbYYoucdNJJ2WqrrRZp/MyZM3PPPfekZ8+e+eyzz1KnTp1st912Oe2007Lhhhsu4+oBAAAAAAAWXbVa0dOtW7ecfvrp+fbbb9OpU6fsvvvuGTRoUDp37pz+/fsv0hznnXdeunTpklmzZqVz587Zaaed8vTTT+eggw7K+++/v4yfAAAAAAAAYNFVmxU9Q4cOTbdu3dK8efPcc889adCgQZKkc+fOOfTQQ3PeeeflqaeeSt26dec7R//+/fPAAw9k++23z80335yaNWd/e37961/n97//fc4777w88MADP8rzAAAAAAAALEy1WdFz5513plAo5IQTTqgMeZJks802y4EHHpivv/46/fr1W+Acd9xxR5Lk9NNPrwx5kmSXXXbJLrvskvfeey9vvvnmsnkAAAAAAACAxVRtgp5BgwYlSXbaaad52uZcGzhw4HzHz5w5M2+++WZWWmmltGrVaonmAAAAAAAA+DFVi63bZs2aleHDh6dJkyZp2LDhPO1NmzZNkgwfPny+c3z55ZeZPHlyWrVqlbKysiWaI0kGDx68SDW/++67lV8PHTp0kcb8lEyfOTN1vvtseZdRFIMHD05mVeTL0XWWdylLbfzgwamYNSt1vvhueZey1AYPHpzCzIp8NnH+2zmWiumDB6cwq5CPx36yvEtZajXebpIa5dXmMwgsAa///528/v938vpPdeL1/7+T1///Tl7/qU68/v938vr/38nrf/X3w5zg+++/X6yxZYVCoVDsgn5s48ePT9u2bbPBBhvk8ccfn6f966+/zs9//vNsvPHG6dOnT5VzvP/++9l///2z00475V//+tc87W+++WYOOeSQ/OIXv8g///nP+dbSokWLJX8QAAAAAADgJ+3iiy/OQQcdtMj9q0VsNnXq1CRJrVq1qmyvXbt2kmTatGnznWPKlClLPQcAAAAAAMCPqVps3TYnhKmoqKiyffr06UmS+vXrz3eOOnXqLPUcSdKzZ88FF/v/jRs3Lm+88UbWXXfdrLPOOqlXr94ijYPqbOjQoTn33HOTzE6tN9544+VcEQA/Bq//AD9NXv8Bfpq8/kPVpk6dmpEjRyZJdtlll8UaWy2CnhVXXDHl5eWZOHFile0TJkxIkirP75mjUaNGSbJUcyTJFltssbByKy3ubxb8lGy88caL9f8TANWD13+Anyav/wA/TV7/oTiqxdZttWrVStOmTfPtt99m8uTJ87SPGDEiSbLRRhvNd46111479erVq+y7JHMAAAAAAAD8mKpF0JMkbdu2TaFQyMCBA+dpe/HFF5Mkbdq0me/4GjVqZJtttsl3332XIUOGLNEcAAAAAAAAP6ZqE/R07NgxZWVl6dq161zbrw0ZMiS9evXKGmuskfbt2y9wjk6dOiVJLr/88sozeZLk+eefz3PPPZfWrVtbSggAAAAAAPzXqBZn9CRJq1atctRRR+WWW27JPvvskw4dOmTSpEnp06dPZsyYkUsuuSS1a9dOMvu8ndtvvz1Jcsopp1TOsccee2SPPfbIE088kX333Tft2rXL6NGj89hjj2WFFVbIX//61+XybAAAAAAAAFWpNkFPkpx11llp1qxZevTokR49eqRBgwZp27ZtTj755LRu3bqy34QJE9KtW7ckcwc9SfL3v/89t912Wx544IHccccdWWmllbL77rvnlFNOyYYbbvijPg8AAAAAAMCCVKugJ5m9hVvHjh0X2GedddbJhx9+WGVbzZo1c8wxx+SYY45ZFuUBAAAAAAAUTbU5owcAAAAAAOCnRtADAAAAAABQogQ9AAAAAAAAJaqsUCgUlncRAAAAAAAALD4regAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJeoAkyQMPPJAWLVrk7LPPXt6l5Oyzz06LFi2q/LX55pvnZz/7WX7zm9/k9ttvT0VFxfIuF+AnbXF+fszpW9Vre9u2bXPggQfmuuuuy6RJkxY61/fff59tt902LVq0yLnnnluMRwEAgGpnUf6+/swzz2TzzTdPixYtctttt2XkyJGVf1cfMGDAAudv0aJFtt1227muHX744WnRokVOP/30BY6d8/5Pv379Fv2B/r+xY8fmtttuy6GHHpqddtopm2++eXbcccccf/zx88z39ttvp0WLFmnbtm2mT5++0Ln/8Ic/pEWLFrnvvvsWuy5YXmou7wIA5me33XZLy5Yt57o2derUfPbZZ3n22Wfzxhtv5M0338xVV121fAoEYIlssskmad++feV/f//99xk7dmxeeeWVdO3aNffdd1/uuOOOrLvuuvOd47HHHsvEiRNTv3799OnTJ2eeeWZWWmmlH6N8AP6/L774Ig888ECeeeaZfPHFF/n++++zxhprpFWrVunYsWPatm07z5jDDz88r7766lzXysrKUrt27TRq1CibbrppDjrooLl+TszPww8/nDPOOCNJ0r1793neaARg4Z588smcfvrpmTlzZv7617+mU6dOGTlyZGX7ueeemz59+izR37X79u2b9u3bZ6+99ipmyenXr1/OPffcjBs3Ls2bN88uu+ySRo0aZeTIkXnuuefy7LPPZt99982ll16a8vLytG7dOptsskmGDBmSZ555Jh06dJjv3OPHj8/TTz+dBg0a5Fe/+lVR64ZlSdAD/Ndq3759DjjggCrb3nnnnRx66KF57LHHcsghh+RnP/vZj1wdAEuqZcuWOeWUU+a5Pn369FxyySW5++6787vf/S6PPPJI6tSpU+Uc9913X2rXrp1jjjkmV199dR544IEcddRRy7p0AP6/e++9NxdffHGmTZuWLbbYIvvss09q1qyZTz/9NI899lgefvjh7LHHHrnkkkuywgorzDN+//33z9prr50kmTVrVqZMmZLPP/88L774YuUbdJdddllq1Jj/RiT33Xdf6tevnylTpqRHjx6CHoDF9Oijj1YG5ldccUWVwcbXX3+dLl265Morr1yie1x44YVp06ZNVl111aWqdY4BAwbk5JNPTr169XLttdfO88GAr7/+Oscdd1x69+6dBg0a5C9/+UuSpFOnTunSpUt69+69wKCnT58+mT59evbff//Ur1+/KDXDj8HWbUBJatWqVfbcc88kyQsvvLCcqwGgGGrXrp3zzz8/bdq0yWeffZYePXpU2W/48OF5/fXX07Zt2xxwwAEpKytLjx49UigUfuSKAX6aunfvnvPPPz8rrbRS7rrrrvTs2TPnnntuzjrrrFx//fV55plnsuOOO+aJJ57I7373u8yYMWOeOfbff/+ccsopOeWUU3LaaaflnHPOyXXXXZeHH344G2ywQXr37p2uXbvOt4YRI0bktddey+67757mzZvnySefzJgxY5blYwNUKw8//HD+9Kc/pUaNGrnmmmuqDHnWWmutrLzyyunTp08ef/zxxb5Hq1atMm7cuJx33nnFKDlTpkzJmWeemUKhkL///e9Vrv5cbbXVcsMNN6RWrVrp2bNnPv/88yTJr3/969SrVy/PP/98xo4dO9979OrVK0ly8MEHF6Vm+LEIeoAlMn369Nx8883Zd99907p162y11Vbp1KlT7r333syaNWue/t9++20uuuiitGvXLq1atcpee+2Vu+66Kw899FBatGiRBx54YLFrWHnllZMkEyZMmOt6oVDIfffdl06dOmWrrbbKlltumYMOOij33XdflW8CTp48OVdddVV++ctfpnXr1tltt91y7bXXZuDAgWnRokWuueaaxa4NgCVTo0aNHHfccUmShx56qMo+c/bK3mWXXbLmmmumbdu2GTFiRJ5//vkfq0yAn6zPPvssl19+eerXr5/bbrstbdq0mafPaqutlhtvvDFbbLFF3nrrrdx4442LPP96662Xbt26pVatWrn11lszevToKvvN+bv9zjvvnL322isVFRXp2bPnEj8XwE9Jr169ctZZZ6VOnTq58cYb065duyr7NWzYMF26dEmSXHDBBfnmm28W6z5nnXVW1lprrTz33HNFOe/mySefzHfffZctt9wyu+6663z7rbHGGrnwwgtz6aWXpkGDBkmSFVdcMR06dEhFRUX69u1b5bghQ4bkvffey2abbZbNNttsqeuFH5OgB1hskyZNyuGHH56//e1vmTp1ag444IDsueee+eKLL3L++efnlFNOycyZMyv7jx49Op06dcqdd96Z1VdfPYcddljWX3/9XHTRRbnuuuuWqIYZM2ZUvqG3+eabV14vFAo5/fTTc95552Xs2LHZd999c/DBB2fixIk577zz8qc//WmusGfy5Mk57LDDcv3116devXr5zW9+ky233DLXX3995fJeAH5cbdu2TVlZWT788MOMGzdurraKior07t07NWvWrPzU4f77758k810BBEDx3HvvvZk2bVoOOeSQbLjhhvPtV7Nmzfzv//5vktkrgH7474OF2WijjbL77rtn2rRpeeyxx+ZpnzFjRh588MHUrFkzO+64Y37961+nrKws9957b5WrhwD4t3vvvTfnnntuVlhhhdxyyy3ZfvvtF9i/ffv22W+//fLdd98t9sqcFVZYIZdccknKyspy6aWXznX2z5J49tlnkyS/+MUvFtr3wAMPzK9//es0adKk8lrHjh2TJL17965yzJwPIVvNQykS9ACL7aqrrspbb72VvfbaK4888kguuOCCXHLJJenTp0+22GKL9OvXL3fccUdl/0suuSQjR47M8ccfn7vvvjtnnXVWrrvuulx++eX57LPPFuvekydPzttvv52TTz45Q4cOzfrrr5999tmnsv2ee+7Jo48+mt122y19+/bNBRdckHPOOSd9+vTJrrvumj59+uTBBx+s7H/ttdfm/fffz3777ZcHHngg55xzTq688srceuutlct7Afhx1a1bN40bN06hUMjXX389V9vTTz+db7/9Nj//+c8rV3buscceqV+/fvr37++1G2AZm7N1z+67777QvltuuWXWWmutfPPNNxk0aNBi3adt27ZJkldeeWWetueeey5jxozJzjvvnMaNG2fttddOmzZtMnr06Dz99NOLdR+An5Lu3bvnL3/5SwqFQlZfffW0bNlykcadd955WXPNNfPss8/m/vvvX6x7br/99jnssMMyefLknHPOOUu13fKXX36ZJAv8oMGCbLPNNtloo43yzjvvZNiwYXO1VVRU5JFHHkn9+vWz9957L3GNsLwIeoDFUlFRkV69eqVu3bq58MIL5zoku1GjRrnggguSJHfffXeSZNy4cenXr1/WXHPNnHTSSXPNte+++1a51cMc55xzTlq0aDHXr6233jodO3ZM//790759+9x5552pV69e5Zg5n+b+y1/+MldttWrVyplnnplk9qdXkmTmzJl54IEHUq9evZx99tkpLy+v7N+mTZv8+te/XpJvEQBFUKtWrSTJxIkT57o+Z8uHAw44oPJa/fr1s+eee2bWrFm55557frwiAX5iKioqKt9k22ijjRZpTLNmzZLMPlNncay11lpJUuXWbXN+FsxZ0ZnM/uR2MvtNTADm9cILL6RLly5ZffXVs9lmm2Xo0KGV27ItzIorrli5MueSSy7JqFGjFuvef/zjH7P++uvn1Vdfze23374k5SdJxo8fnySV27Etifmt6nn22WczduzY7LPPPks1Pywvgh5gsXzyySeZMmVKNt100zRs2HCe9k033TQrrLBCPvvss0yaNCnvvvtuZsyYkVatWqV27drz9J/zSb2q7Lbbbjn55JNz8skn5+ijj84GG2yQJNlkk03y2GOP5dprr81qq61W2X/q1KkZOnRo5YF711xzzVy/+vbtm/Ly8rz33nspFAoZMWJEvvvuuzRr1iyNGzderNoAWLYmTZqUZO5/xH3xxRd56aWX0qhRo3m2a5gT/Nx///2ZNm3aj1YnwE/Jd999V3keZ/369RdpTKNGjZJkgQdfV2VO4D/n58Eco0ePzvPPPz/Pz4I99tgjDRo0yCuvvJKPP/54se4F8FMwZsyYNG3aNN27d0/Xrl2zwgorpFevXvM9F/M/7bDDDvnNb36TyZMn5+yzz16slTn16tXL5ZdfnvLy8vz973+fZzXNopqzDducwGdJ7Lfffqldu3YeeeSRuZ5hzrZtnTp1WuK5YXmqubwLAErLnE9Wr7jiivPts/rqq2fSpEmZMmVKvvvuuyTJqquuOt++89O+ffu5PrH9pz/9KRdeeGHuvffenHzyybn99tsrt+1JkgkTJqRQKKSioiLdunWb77wzZ87M5MmTl6o2AJadsWPHZvLkyalRo0bWWWedyuv3339/Zs2alXHjxqVVq1ZVjh03blweffTRuT7lDUBxNG7cOGVlZSkUCpk8eXJWWmmlhY6ZPHlyktnnNCyOqgL/ZPbPgpkzZ2bvvfee64Nk9erVy5577pn7778/PXr0yPnnn79Y9wOo7tZbb73Ks5OT5Pzzz8+ZZ56ZCy64IJtvvvkirdQ888wz8+KLL+bVV1/NHXfckd/+9reLfP8tt9wyxxxzTP75z3/mzDPPrNxt5Yc++OCD9OvXb57r7du3T8uWLbP++uvnjTfeyKeffrrQ+33zzTepUaPGXGf0JLM/gPDLX/4yffr0ySuvvJKf/exnGTNmTJ5//vlsttlmc50DDaVE0AMsljkBz1dffTXfPhMmTEgy+4fnnH/Q/efWO3P85yf0FqS8vDx/+ctf8umnn+aVV17JiSeemLvuuqvy035z/hG4xhprpH///gudr5i1AVA8L7/8cpLZKzjnvFbPmjWr8lN2++2331zbc87x+eef56WXXkr37t0FPQDLQK1atbLWWmtl1KhRGTp0aLbddtuFjvnoo4+SJOuvv/5i3WvOVm/rrrtu5bVCoVD5s+Cuu+7KXXfdVeXYhx56KKeffvpih0sA1dnWW2891wda99133wwYMCB9+vTJaaedlvvvv3+urfGrUq9evVx22WXp3Llz/v73v2ennXZarBpOPvnkPPfcc3n33Xdzww03zNP+wQcfVPnB3bXXXjstW7ZMu3bt8sADD2TAgAE58cQTF3ivK6+8Mg8++GBOOumknHLKKXO1derUKX369Env3r3zs5/9LA899FBmzJhhNQ8lTdADLJYNNtgg9evXzyeffJKvv/56rq3TkmTYsGEZM2ZMmjVrltq1a6dVq1apUaNG3nzzzSrnm9/1+SkvL8/f/va37LPPPnnrrbdyzTXX5PTTT08yO7hp2rRpRowYka+++iprrLHGXGO/++67XHvttdlggw3SuXPnNGvWLCussEI++OCDTJ06dZ6/0CxubQAsvUKhkDvuuCPJv89bSJLnn38+X375ZZo3b57LL7+8yrFjx47NzjvvnHfeeSdvv/12Wrdu/aPUDPBTsscee+SWW27Jk08+OU/Q8/3336dOnTopKytLkrz//vsZNWpU6tevv0ih0A+98sorSTLXuJdeeikjR47MmmuumZ133rnKcQMGDMiXX36Z3r17p3Pnzot1T4CfmgsvvDBvvvlmPv7441x44YW57LLLFjpm6623zu9+97vcdNNNOeussxbrfrVr187//d//5aCDDsr111+fjTfeeK72Aw44YK6dXf7TzjvvnLXWWitvvvlmnn322ey6665V9vv888/z+OOPp1AoZJdddpmnfbvttsv666+fp556KhdeeGH69OmT+vXrZ++9916s54H/Js7oARZLrVq1csABB2T69Onp0qXLXOcgjB8/PhdccEGS5KCDDkqSrLLKKmnfvn0+//zz3HjjjXPN9eyzz+bpp59e7BpWX331nHfeeUmSm2++OW+//XZl25xPX5x33nmZMmVK5fVZs2bloosuyp133pkhQ4YkSWrWrJmOHTtmypQp+b//+7/K/caT5O23307Pnj0XuzYAltyMGTNy6aWX5s0338yGG2441yfq5hy8vaB/+DVp0iS//OUvkyQ9evRYtsUC/EQdfPDBqVOnTu69994MHTp0rrabb745u+22W2699dZMmzYtl156aZLkiCOOqHIl5vwMGzYsL7zwQurUqTPXm25zfhYcccQR6dKlS5W/jj766CTJ3XffvbSPClDtrbDCCrniiitSXl6eBx98ML169VqkcaeeemqaN2+ed955Z7Hvuckmm+SUU07JjBkz8sEHHyzW2Dp16uTPf/5zkuSPf/xjldu8DRs2LL///e8zZcqUHHDAAfP98NdBBx2UiRMn5p577smQIUPyq1/9ykpQSpoVPcBcnn/++Rx++OHzbb/oooty+umnZ/DgwXnqqaeyzz77ZMcdd0xFRUX69++fr7/+Ou3bt8+RRx5ZOebcc8/N4MGDc+WVV6Z///5p1apVPv300zz33HNp0qRJvv3229SosXi5869//es8/vjjefrpp3P22WfnoYceSu3atXPUUUfltddeS//+/bPXXnvl5z//eRo0aJAXX3wxH330UZo3b57/+Z//qZzn5JNPzosvvpgePXrkrbfeSps2bTJmzJg89dRTadiwYaZMmbLYtQH8FC3Kz485Pvjgg1xzzTWV/z1t2rSMGTMmAwcOzOjRo7Peeuvln//8Z+XZC99++22ee+651KxZM7/+9a8XWMchhxySvn375tFHH81ZZ52Vxo0bL+WTAfBD66+/fs4+++xceOGFOeqoo/KPf/wjbdq0SZJstdVWefPNN3PZZZflhhtuyLhx47L55pvn97///SLPP2rUqJx22mmZNWtWjj/++MqzFcaOHZt+/fot9GfBfvvtlyuvvDJDhw7NK6+8ku22227pHhigmtt6661z4okn5pprrkmXLl3SqlWr1K9ff4Fj5qzM6dixYyoqKhb7nsccc0yeeeaZvPXWW4s9tl27drn88stz3nnn5aSTTkrz5s2zzTbbpG7duhk+fHheeOGFzJw5Mx06dKj8MHJVDjjggHTt2jV///vfk8S2bZQ8QQ8wl2+++SbffPPNfNunTJmSBg0apHv37rn99tvzyCOPpFevXqldu3ZliLL//vtXbteQzD4zp2fPnunatWsGDBiQwYMHZ7311stf//rXDBs2LLfeeutC/xJRlQsvvDCvv/56hg0blquuuipnnnlmatasmeuvvz733ntvHnzwwfTp0ydJss466+SUU07JEUcckYYNG1bOscIKK+Suu+5Kt27d8tRTT6VHjx5ZY401cuqpp6Z27dq59NJLl6g2gJ+aRfn5MceQIUMqV1cms1dYNmzYMBtttFGOPvrodOrUaa7X3gceeCAVFRXZbbfdsvLKKy+wjrZt26ZZs2YZPnx47r///hx77LFL8VQAVOXQQw9NrVq18te//jWHHXZYttxyy2yxxRapU6dO6tevn1q1amXcuHFJkmbNmlX5JuCDDz6YV199NcnsbTunTJmS4cOH56WXXkpFRUUOOuignHDCCZX9e/funYqKirRr1y6rrLLKfGtr2LBh9tprrzzwwAPp3r27oAdgEZxwwgl58cUX88Ybb+S0007L1VdfvdAxLVu2zEknnZSrrrpqse9XXl6eyy+/PPvtt1+mTp262OP322+/bLPNNunZs2defPHFPPnkkxk/fnwaNWqUX/ziF+nYseN8t3WbY+WVV067du3yxBNPpGXLlrZ9puSVFQqFwvIuAqjePvnkk6y99tqVn8z+oT/+8Y/p06dP7r///rRq1epHr23EiBFZddVVqzxw8O9//3v++c9/pmvXrunQocOPXhsAAPw3++KLL3Lfffelf//+GTVqVKZNm5bVVlstm2++efbaa6+89tprufPOO9OgQYPKD10dfvjhlQHPD9WpUyerrbZaWrdunQMOOGCeA75/9atf5eOPP861116b9u3bL7Cut956KwcffHBq1qyZZ555Zq7DxwEAqiNBD7DM/exnP0tFRUWeeuqpyq0XkuSjjz5Kx44d06BBg/Tv3z+1atX60Ws78MAD89577+XRRx9Ns2bNKq9/9dVXOeiggzJ+/Pj0799/rroBAIBFM3To0Nx6663ZYYcdHHINALCMCHqAZe7aa6/N1VdfnVVWWSW77bZbGjVqlJEjR+bpp5/OzJkz07Vr1+y2227LpbaHHnooZ511VlZcccXsvvvuWXXVVTNmzJj069cvEydOzJ///Od07tx5udQGAAAAALAwgh7gR/H444/nnnvuyccff5xx48alSZMmadOmTY4++uhsttlmy7W2gQMH5o477sj777+fb7/9NiuttFJat26dI444Ittvv/1yrQ0AAAAAYEEEPQAAAAAAACWqxvIuAAAAAAAAgCUj6AEAAAAAAChRgh4AAAAAAIASJegBAAAAAAAoUYIeAAAAAACAEiXoAQAAAAAAKFGCHgAAgOVo1qxZy7sEAACghAl6AACgRH322Wf5xz/+kYMPPjht27bNZpttljZt2uSggw7KlVdemc8//3y+Y88+++y0aNEie++9949YcfGMHDkyLVq0SIsWLfL444/P0/7xxx/nlFNOyfbbb5/NN988O++8c2666aZcc801adGiRbbaaqvlUPW8hgwZkoMPPnie6w888EDl840dO3Y5VLZ4Xnnllcp6W7RokUMOOWSRxw4YMGCusVX9fi5Lhx9+eFq0aJGzzz67aHP+t/05AwCgequ5vAsAAAAWz6RJk/J///d/ue++++ZZDTJhwoS88847eeedd3LbbbflpJNOyvHHH7+cKl0+xowZk0MPPTTjx4+vvDZ69Og0bNgw33///XKsbG7PP/98jj/++MyYMWN5l1J0b731VkaPHp3VV199oX0fe+yxH6EiAACovgQ9AABQQsaOHZsjjzwyH374YZJk1113zYEHHphNN9009evXz1dffZXXX389N954Y0aPHp1//OMf+fbbb3Puuecu58qLq1atWmnatGmSpH79+nO1PfPMM5Uhz/nnn58OHTpk5syZWWGFFXL//fenadOmqVev3o9e838aM2bMfEOeFVZYofL5ysvLf8yyiqJQKOSpp57KYYcdtsB+FRUVefrpp3+kqgAAoHoS9AAAQImYNWtWTjnllHz44YepUaNGLrnkkuy///5z9WncuHFatmyZAw44IMcdd1xee+213HHHHdluu+3Svn375VR58a2++up56qmnqmz79ttvkySNGjVK586d52o74ogjcsQRRyzz+pbWL3/5y/zyl79c3mUskebNm+ejjz7KE088sdCg56WXXsr48eOzyiqr5JtvvvmRKgQAgOrFGT0AAFAi7rvvvgwaNCjJ7DN2/jPk+aH69evnH//4Rxo0aJAkueqqq36MEv8rzJw5M0kqn50f1x577JEkGTRo0ELDmznbts0ZAwAALD4regAAoET861//SpKsvfbaOfTQQxfaf9VVV02nTp1y7733ZrXVVsvYsWPTpEmTRbrX6NGj06NHj7z00kv5/PPPM2nSpNSvXz/rrLNOdt111xx22GFp3LjxPOMqKipy//3359FHH82QIUMyderUNGrUKJtvvnl+9atf5Ve/+lVq1Jj382ZffPFFbr311rzwwgsZNWpUysvLs9pqq2W77bbLYYcdlubNm8/Vf+TIkdltt92SJF27dk2HDh1y9tln58EHH6zsM2rUqLRo0SJJsv/+++eyyy7LNddck27duqV+/fp5880356lj6tSp6d27dx5++OF88sknmThxYlZfffXsuOOOOeaYYyq3U/uhQqGQfv36pW/fvnn77bczduzYzJo1K02aNMkWW2yRgw46KD//+c+rrH2OOXVeeumlOeCAA/LAAw/knHPOSZIMHDhwnt+3ioqK9O7dO4888kiGDBmSyZMnZ+WVV84222yTQw89NNtuu+08db7yyis54ogjUrt27bzzzjv54IMPcvPNN+eVV17JuHHjsuqqq+bnP/95jjvuuKyzzjrzjF9UO+64Y26//fZMmDAh/fr1yyGHHFJlv+nTp+fpp59OWVlZ9txzz3Tv3n2B8w4fPjx33HFHXnrppXz55ZepU6dO1ltvvey+++457LDDssIKK8x37DvvvJN//etfGTx4cL799tuss8462X///XPkkUcu9HmmT5+eHj165PHHH8+wYcPy/fffV/6Z+N3vflflnwkAAPgxCXoAAKAEfPDBB/nss8+SzA4tatWqtUjjTjvttJxxxhmLdc7LU089lT/96U/5/vvv57o+fvz4jB8/Pu+9917uu+++9OjRY65AYPr06Tn66KPz2muvzTVuzJgxefbZZ/Pss8/moYceyvXXX5/atWtXtg8ePDhHH310Jk2aNNe4Tz/9NJ9++mnuu+++dOnSJR07dlzkZ1gSn3/+eU488cR89NFHc10fOXJk7r333jz88MO5+uqrs/POO1e2TZ48OSeffHJeeumleeb78ssv8+WXX+bxxx/P8ccfn//5n/8pSp1ff/11TjzxxLzzzjtzXf/qq6/St2/f9O3bN4cffnj+93//t8pQLUkeffTRnHnmmamoqKi89sUXX+Tee+9Nnz59ctddd2XTTTddovpq1qyZ3XbbLQ8++GCeeOKJ+QY9L7zwQiZMmJCtttoqa6655gLn7N69ey699NK56p0+fXrefffdvPvuu7n77rtzww03pGXLlvOMveOOO3LJJZekUChUXhs2bFiuuOKK9O/fP9OnT5/vfT///PMce+yx+eSTT+a5fs8996RXr1655JJL8utf/3qB9QMAwLJk6zYAACgBP1x90qZNm0UeV69evcUKeUaMGJHTTz8933//fVq3bp0bb7wxzz33XF544YV079698tyY0aNH55prrplr7M0335zXXnstNWrUyKmnnprHHnssL7/8ch5++OHKkOaFF15Ijx49KscUCoWceeaZmTRpUtZbb71069Ytzz33XF588cXcdNNNad68eWbNmpW//vWv+frrrxdYe5cuXfLGG2/k97//fZJkrbXWyhtvvJE33ngjXbp0WeDY6dOn59hjj81HH32UevXq5fTTT89TTz2VF154IV27ds2aa66ZqVOn5vTTT5+rjksuuSQvvfRSatasmVNOOSV9+vTJyy+/nEcffTR/+ctfssoqqyRJbrzxxowYMSLJ7BVZb7zxRi688MLKeebUubDAYNq0aTnuuOPyzjvvpLy8PMcee2weffTRvPzyy+nevXtlCHXnnXema9euVc4xY8aMnH322Vl77bXTtWvXvPTSS+nXr1+OPfbYJLPDq4suumiBdSxMhw4dkiSvvvpqvvvuuyr7zNm2bU7f+enbt2+6dOmSioqKNG/ePNddd10GDhyYZ555Jueee25WXHHFfPXVVzn66KMzevToucb2798/F198cQqFQrbaaqvcddddefnll/PAAw9kjz32yGuvvZbBgwdXed9Jkybl6KOPzieffJJVVlklXbp0ybPPPpuBAwfmlltuydZbb52KioqcddZZeeWVVxb3WwQAAEUj6AEAgBIwJyRIkg022GCZ3efOO+/M9OnTs/LKK+fmm2/OLrvskjXXXDOrrrpqtt1221xzzTWV24K9+OKLc43t169fktkrjk466aQ0a9YsjRs3TosWLXLRRRdlp512SvLvN/iTZOjQofn000+TzA5Ndt9996y55ppZZZVVsvPOO+emm25KzZo1M23atDzzzDMLrL127dpp0KBB5WqnsrKyNGjQIA0aNJhrBVFV7rjjjnzyyScpKyvLddddl9///vdp2rRpVl111XTo0CE333xzateunYkTJ+buu+9Oknz33XeVW8WdcsopOfnkk7PxxhuncePG2XDDDXPooYfmiiuuSJLMmjUrAwcOnKuuH9Y0p86aNRe86cLdd9+dDz74IEly2WWX5U9/+lM23HDDNG7cONtuu21uvPHG7L333klmh0tzvrc/NGvWrDRs2DB33313OnTokJVXXjnrrrtu/vSnP+WAAw5Ikrz++usLPV9nQXbYYYc0bNgwM2bMyNNPPz1P+/Tp0/PMM89Ubts2P99//30uvfTSJEnLli1zzz33ZLfddkuTJk2y9tpr54gjjsidd96ZOnXqZOzYsZXf7zkuv/zyJMmmm26a22+/PW3atEnjxo2z2Wab5eqrr678XlXlpptuyogRI9KoUaPcc889Ofjgg7PWWmulSZMm2XHHHXPHHXekTZs2lUEkAAAsL4IeAAAoAT/c1qyqs3GKZZNNNknHjh1z4oknZqWVVqqyz5wVRePGjZvr+pxttcaOHVvluHPOOSe33357rrrqqsprP9w2q6pxa6yxRv75z3/m/vvvX+Cb8kvr0UcfTZK0a9cuO+ywwzztG220Ufbbb79stdVWqVevXpLZK1+OOuqo7LHHHvPdnmybbbap3D5tfitbFkevXr2SJNttt12Vq3/Kysry5z//OXXq1MmsWbPSs2fPKuc56KCDqjyvqV27dpVff/HFF0tcZ+3atSvneuKJJ+ZpHzBgQCZNmpRtttkmq6+++nzn6d+/f8aMGZMkOffcc9OgQYN5+rRs2TKHH354ktm/jxMnTkySfPjhhxk2bFiS2VsY1qlTZ56xZ599dpXhWqFQqPzede7cOeuuu+48fWrVqlW5Hd/QoUPz1ltvzfc5AABgWXJGDwAAlIAfnrVSUVGx0BUqS+rAAw/MgQceWGVboVDI8OHDK1cX/fC8lCTZeuut89FHH+XZZ5/NUUcdlX333Tc777xzZaCw0UYbZaONNpprzEYbbZSVVlop48ePzxlnnJFXX3017du3zzbbbFO5MmfOSqBlZeLEiXn//feTJLvssst8+/3nqo111lknZ5xxxnz7T5o0Ka+//nrKy8sza9aszJgxY6nqHDduXIYOHZok2WOPPebbr1GjRtluu+0yYMCADBo0qMo+rVu3rvL6D8OfadOmLUW1s7dke+ihhzJw4MBMmDAhDRs2rGybs6prr732WuAcc857atKkyQK3LNxjjz1y8803Z8aMGXnzzTez8847V26nVl5enu23377KcauuumpatWo119aIyewzfOYEj5tsskkmT55c5fiNNtootWvXzvTp0/P6669nyy23XODzAADAsiDoAQCAEvDDVTzfffddlSsbimn69OkZMGBAhgwZks8++ywjRozIxx9/PNfKov900kkn5fnnn8+oUaPy0ksv5aWXXkqNGjWy2WabZZdddsnuu++eTTbZZK4xdevWzbnnnpuzzz4733//fe68887ceeedadCgQbbffvv84he/yO67755GjRots2f9+uuvUygUkiTrrbfeEs0xbNiwvPrqqxk2bFhGjBiRTz75JCNHjsysWbMq+8y5x5L66quvKudo1qzZAvs2a9YsAwYMyFdffVVl+/xWhf0wQPxh7Utixx13zIorrpiJEyfmmWeeyX777ZdkdoD07LPPpkaNGpVnPs3PnPoXtl3hD78fc87pmTN29dVXr3I1zxwbbLDBPEHPD7dKPOWUUxZ47/+sFQAAfmyCHgAAKAE/fCP7888/zzrrrLPIY2fNmjXXiqCF6d69e66//vrKLbPmqFWrVrbddtvUqlWr8ryZH1pttdXy0EMP5aabbkrv3r0zevTozJo1K++8807eeeeddOvWLdtuu20uvfTSNG3atHLcvvvumw022CA33XRT+vfvn2nTpmXy5Mnp169f+vXrlwsvvDC//e1v88c//nGxnmNR/XALujnbsi2qkSNH5uKLL86zzz47T5CzxhprZKeddkrv3r3nWf20JH64qqR+/foL7Fu3bt0kyZQpU6psX9hZQMUwZ/u23r1754knnqgMevr375/Jkydnu+22y6qrrrrAOeY886I+7w/HzNnC7YdtVVlhhRXmubagQHN+lmQMAAAUg6AHAABKwDbbbFP59cCBA+e7FdV/GjJkSI444oi0bds2v/3tbxe4/VWS3HLLLZUH2K+//vpp3759Ntlkk2y00UbZcMMNU7t27dx4441VBj1J0rBhw/zxj3/M6aefnvfeey8vvfRSXnjhhbzxxhupqKjIoEGDcvTRR+fRRx+da/VI69atc80112TKlCl5+eWX89JLL+X555/Pp59+moqKitx8882pWbNm5ZkoxfTDcGfq1KmLPG7ChAk57LDD8uWXX6ZWrVrZbbfdstVWW2XjjTfOxhtvnNVWWy1J8vDDDxelzh+u4ppfgDPHnLBjYSHHstahQ4f07t07L774YiZPnpwGDRrk8ccfT7LwbduSfwc8i/q8yb9/P+dsFbew39MfnhP1n3Mks7eZW9gKKgAAWJ6K/3E4AACg6NZZZ51sttlmSZLHH398kVeIPPbYYxk/fnyeeuqphY75/vvvc+211yZJ2rVrl0cffTRnnHFG9tlnn7Rs2bIymPnuu+8Wet+ysrJsvvnmOe6443LHHXfkhRdeyAEHHJBk9oqkAQMGVDmufv36adeuXc4777w88cQT6dWrV+XqpR49eizSMy+uNdZYo/Lrzz//fL79Bg0alK5du+ahhx5KoVDIXXfdlS+//DLl5eW566670rVr1xx55JHZcccdK0OeyZMnVxkkLGmdZWVlSWZvFbcgw4cPT5KstdZaRbn3ktppp52ywgorZNq0aXnuuefy/fff59lnn03NmjUXum1bkqy55ppJ/v088/PD78ecMXOeffTo0QsMikaOHDnPtR/+maiq/YeWdks+AABYWoIeAAAoEUcccUSS5LPPPkv37t0X2n/06NGV/dZff/1st912C+w/dOjQyu2nDj744JSXl1fZ7+WXX678es45LmPGjMkRRxyRHXfcMf37959nTKNGjXL22WfPVVuSPPLII9l///3Trl27Kt8w33zzzXP44Ycnmb2CZmErO5ZEkyZNsv766ydJXnjhhfn2e/DBB3Pdddfl2muvTVlZWQYPHpwkadmyZbbccssqx/xw5dN/nnkzJ7RZVI0aNcpGG22UJHnyySfn22/s2LF57bXXkiRbbLHFYt2j2OZs35YkTz31VJ5//vlMmTIl2223XZo0abLQ8dtuu22S2eHinGeqylNPPZUkqVGjRlq1apVkdsiUzP6+P/fcc1WOmzx5ct544415rrds2bJyNdEzzzwz3/u+//772WKLLbLHHnvkscceW+jzAADAsiDoAQCAErHPPvukdevWSZK//e1vuf/+++fb99tvv80JJ5xQeU7JGWecMd/gZo4fntsyvxUjt9xyS95///3K/56zSmjllVfOxx9/nG+++SZ33XVXlaHNkCFDKr9ed911k8w+H+X999/PqFGj5vtG+Zxxq6yyykLPallS+++/f5LZgcHrr78+T/unn36aRx99NMm/txyb8/384osv8v33388z5ttvv63cBi/JPCuqfvj7sairfg466KAkySuvvFLllnCFQiEXX3xxpk+fnrKyssrnWp46dOiQJBkwYED69OmTJNlzzz0XaWy7du2y8sorJ0kuvvjiubZom+ODDz6oDDTbtWuXxo0bJ0nWW2+9bL311kmSq666KhMmTJhnbNeuXasMD2vWrFn5vbv//vvz1ltvzdOnoqIil112WaZNm5aRI0dm8803X6RnAgCAYhP0AABAiSgvL88//vGPrL766pkxY0bOPffcHHnkkXn88cfzySefZPz48fnwww9z4403Zp999sl7772XJPnd736X9u3bL3T+jTfeOKuuumqSpFu3brn77rszatSofPPNN3n55Zdz2mmnzRVcJP8+G6VGjRo58sgjk8x+Q//kk0/O66+/nm+//Taff/55Hnroofzxj39MkjRt2jQ77rhjkmTnnXeuXKVy7rnn5sYbb8ywYcPy3Xff5cMPP8wll1ySBx98MElyyCGHLOV3cP4OP/zwrL/++pk5c2bldnNffvllRo8enb59++aoo47KlClTssoqq+Soo45KkspnGDt2bE466aQMHjw4Y8eOzSeffJI77rgj++67b0aMGFF5j/8MFBo1alT59YMPPpixY8dWGWT80KGHHpqWLVsmSc4555xcccUVGTZsWMaNG5c33ngjxx9/fGWYcvTRR2fTTTdd6u/N0vr5z3+eFVZYIZMnT84TTzyRWrVqZffdd1+ksbVr1855552XZHag85vf/CbPPPNMxo4dmy+++CJ33XVXjjjiiEybNi0rrbRS/vznP881/vzzz0/NmjXz2Wef5Te/+U369++f7777LkOHDs25556b22+/fb4B6Mknn5zVVlstFRUVOeqoo3LjjTdmxIgRGTt2bAYOHJijjz46r7zySpLZq+3mhJcAAPBjq7nwLgAAwH+LddZZJ/fcc0/+9Kc/5fXXX8/AgQPn2h7sh+rWrZv/+Z//qQxgFqZmzZq58MILc+qpp2bKlCm54IIL5ulTv379/OY3v8m//vWvJLO3kZuzBddRRx2Vt956K08//XT69euXfv36zTN+1VVXzbXXXlv55vqc8Oqoo47KN998kyuvvDJXXnnlPOPat2+fE044YZGeY0k0aNAgN954Y4455piMGDEiF198cS6++OK5+qy88sr55z//WRnQdOzYMX379s3rr7+eF154ocpt33bYYYdMnz49gwYNymeffTZX2+abb5769etnypQpOf/883P++efntNNOy4knnjjfOmvXrp1//vOfOf744/P+++/npptuyk033TRPv9/+9rc5/fTTl+A7UXy1a9fOrrvumkceeSSFQiE77LDDXCHXwuy111759ttvc+mll+bDDz+s8s/B2muvnauvvnqus3WS2Vuwde3aNaeffno+/vjjHHfccXO1b7rpptl4443Tu3fveeZs0qRJ/vWvf+X444/PqFGj5vtnc5999qkMMQEAYHkQ9AAAQIlZa6210qNHjwwYMCCPPfZY3n777Xz55Zf5/vvvs8IKK2T99dfPTjvtlE6dOs3zxvfC7Lbbbrn77rtz44035o033si4ceNSt27drLPOOtlxxx1z2GGHZbXVVkuvXr0ybty4PPnkk9lqq62SJLVq1cq1116bPn36pHfv3nn//fczfvz41KtXL02bNk27du1yxBFHpGHDhnPds3nz5nnkkUdy++23Z8CAAfn0008zffr0NG7cOJtvvnn23XffRd7qa2mst956efjhh3PXXXfliSeeyPDhwzN9+vSsvfbaadeuXX73u99llVVWqexfu3bt3HbbbfnXv/6VRx99NJ999llmzZqVxo0bZ5NNNsn++++fDh065Pbbb8+gQYPy2muvZezYsZXBWJMmTXLDDTfkiiuuyEcffZSaNWtWub3Yf1p99dXTs2fP9OrVK3379s2HH36YqVOnZo011sjWW2+dQw45pPL35L9Fhw4d8sgjjyRZ9G3bfujwww/PDjvskNtuuy0DBw7M119/nXr16mX99dfPXnvtlQMPPDArrLBClWPbt2+fhx9+OP/6178ycODAjB49Oquttlo6dOiQk046KZdddtl879u8efP06dMnd999d5566qkMHz48kydPzkorrZTWrVunU6dOlWcQAQDA8lJWqGrzbAAAAAAAAP7rOaMHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABKlKAHAAAAAACgRAl6AAAAAAAASpSgBwAAAAAAoEQJegAAAAAAAEqUoAcAAAAAAKBECXoAAAAAAABK1P8DAEifswu6Nx8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 840x420 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 409,
       "width": 829
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Bar Graph\n",
    "models = ['LogReg', 'LDA', 'QDA', 'KNN-CV']\n",
    "accuracies = statallfeatures_dic[\"Accuracy\"]\n",
    "sensitivities = statallfeatures_dic[\"Accuracy\"]\n",
    "specificities = statallfeatures_dic[\"Specificity\"]\n",
    "precisions = statallfeatures_dic[\"Precision\"]\n",
    "f1_scores = statallfeatures_dic[\"F1_Score\"]\n",
    "\n",
    "x = 6*np.arange(len(models))\n",
    "width = 0.8\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(12, 6))\n",
    "import seaborn as sns\n",
    "colors = sns.color_palette(\"colorblind\")\n",
    "\n",
    "acc = ax.bar(x-width*2, accuracies, width, label='Accuracy', color=colors[0])\n",
    "sen = ax.bar(x-width, sensitivities, width, label='Sensitivity', color=colors[1])\n",
    "spe = ax.bar(x,specificities, width, label='Specificity', color=colors[2])\n",
    "pre = ax.bar(x+width, precisions, width, label='Precision', color=colors[3])\n",
    "f1 = ax.bar(x+width*2 , f1_scores, width, label='F1_Score', color=colors[4])\n",
    "\n",
    "ax.set_xlabel('Classification Model', fontsize=14)\n",
    "ax.set_ylabel('Percentage', fontsize=14)\n",
    "ax.set_title('Model Performance For Predicting Atrial Fibrillation Using All Features', fontsize=16)\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(models)\n",
    "ax.legend()\n",
    "ax.set(ylim=(0.0, 0.97))\n",
    "\n",
    "\n",
    "fig.tight_layout()\n",
    "\n",
    "plt.legend(loc=\"upper left\", prop={'size': 10})\n",
    "plt.show()\n",
    "\n",
    "fig.savefig('AllFeaturesPerformance.png')\n",
    "\n",
    "#Code from https://matplotlib.org/stable/gallery/lines_bars_and_markers/barchart.html#sphx-glr-gallery-lines-bars-and-markers-barchart-py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ed4fc34c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1050x525 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 463,
       "width": 875
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Box Plot Accuracies\n",
    "\n",
    "models = ['LogReg', 'LDA', 'QDA', 'KNN-CV']\n",
    "\n",
    "x = np.arange(len(models))+1\n",
    "\n",
    "LogRegAcc = indaccs_dic['LogReg']\n",
    "LDAAcc = indaccs_dic['LDA']\n",
    "QDAAcc = indaccs_dic['QDA']\n",
    "KNNAcc = indaccs_dic['KNN']\n",
    "\n",
    "data = [LogRegAcc, LDAAcc, QDAAcc, KNNAcc]\n",
    "\n",
    "fig, ax = plt.subplots(figsize = (15,7.5))\n",
    "bplot = ax.boxplot(data, patch_artist = True)\n",
    "\n",
    "ax.set_title('Accuracies of AFIB detection Using All Features for Various Classifiers', fontsize=15)\n",
    "ax.set_xlabel('Classification Model', fontsize=15)\n",
    "ax.set_ylabel('Accuracy', fontsize=15)\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(models)\n",
    "\n",
    "import seaborn as sns\n",
    "#colors = sns.color_palette(\"colorblind\")\n",
    "colors = sns.color_palette()\n",
    "\n",
    "for patch, color in zip(bplot['boxes'], colors):\n",
    "        patch.set_facecolor(color)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d29dd7aa",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'dataset2021' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [14]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mconcat(\u001b[38;5;28mmap\u001b[39m(pd\u001b[38;5;241m.\u001b[39mread_csv, [\u001b[43mdataset2021\u001b[49m, dataset2017]), ignore_index \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m      2\u001b[0m df\u001b[38;5;241m.\u001b[39misnull()\u001b[38;5;241m.\u001b[39mnull()\n\u001b[1;32m      3\u001b[0m df\u001b[38;5;241m.\u001b[39mdropna(axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m,inplace\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'dataset2021' is not defined"
     ]
    }
   ],
   "source": [
    "df = pd.concat(map(pd.read_csv, [dataset2021, dataset2017]), ignore_index = True)\n",
    "df.isnull().null()\n",
    "df.dropna(axis=0,inplace=True)\n",
    "df.head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
